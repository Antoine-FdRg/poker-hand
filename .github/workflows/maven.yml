name: CI/CD Pipeline

on:
  push:
    branches:
      - '*'
  pull_request:
    branches:
      - '*'

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'adopt'

      - name: Build with Maven
        run: mvn -B package --file pom.xml

      - name: Run Tests
        run: mvn test

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Check and Create Tag
        if: github.ref == 'refs/heads/main' && success()
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Configure Git user identity
          git config --global user.email "${GITHUB_ACTOR}@users.noreply.github.com"
          git config --global user.name "${GITHUB_ACTOR}"
          
          # Generate a JAR file
          mvn clean package
          
          # Get the current project version from the POM.xml
          PROJECT_VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)

          echo "------------------ TEST ------------------"
          
          # Check if the "1.0.0" tag exists
          if git rev-parse v1.0.0 >/dev/null 2>&1; then
            # Tag exists, increment the project version (e.g., 1.0.0 -> 1.0.1)
            echo "Changing version"
            NEW_VERSION="1.0${PROJECT_VERSION%.*}.$((${PROJECT_VERSION##*.}+1))"
            echo $NEW_VERSION
          else
            # No tag exists, set the version to "1.0.0"
            echo "Initialize first version v1.0.0"
            NEW_VERSION="1.0.0"
          fi
          
          # Update the project version in the POM.xml
          mvn versions:set -DnewVersion=${NEW_VERSION} -DgenerateBackupPoms=false
          
          # Commit the updated POM.xml
          git commit -am "Bump version to ${NEW_VERSION}"
          
          # Create a version tag and push it
          git tag -a v${NEW_VERSION} -m "Version ${NEW_VERSION}"
          git push --tags

          RELEASE_TAG=v${NEW_VERSION}
          GITHUB_REPO=${{ github.repository }}
          GITHUB_OWNER=${{ github.repository_owner }}

          # Locate the JAR file dynamically using a wildcard
          JAR_FILE_PATH=$(find /home/runner/work/dojo-poker-23-24-ps5-23-24-poker-a/dojo-poker-23-24-ps5-23-24-poker-a/target/ -name 'ProjetS5-*.jar' | head -n 1)
          
          # Upload the JAR file as a release asset
          echo "Uploading JAR file to GitHub release $RELEASE_TAG"
          release_info=$(curl -L \
          -X POST \
          -H "Authorization: Bearer $GITHUB_TOKEN" \
          -H "Accept: application/vnd.github+json" \
          -H "X-GitHub-Api-Version: 2022-11-28" \
          https://api.github.com/repos/$GITHUB_REPO/releases \
          -d "{\"tag_name\":\"$RELEASE_TAG\",\"target_commitish\":\"main\",\"name\":\"$RELEASE_TAG\",\"body\":\"Release: $RELEASE_TAG\",\"draft\":false,\"prerelease\":false,\"generate_release_notes\":false}")

          if [ -z "$release_info" ]; then
            echo "Error: Release not found or API request failed."
            exit 1
          fi
          
          upload_url=$(echo "$release_info" | jq -r .upload_url)
          
          if [ "$upload_url" == "null" ]; then
            echo "Error: Could not retrieve the upload URL from the release information."
            exit 1
          fi

          # Extract the release_id from the response
          RELEASE_ID=$(echo "$release_info" | jq -r .id)

          curl -L \
          -X POST \
          -H "Accept: application/vnd.github+json" \
          -H "Authorization: Bearer $GITHUB_TOKEN" \
          -H "X-GitHub-Api-Version: 2022-11-28" \
          -H "Content-Type: application/octet-stream" \
          "https://uploads.github.com/repos/$GITHUB_REPO/releases/$RELEASE_ID/assets?name=ProjetS5-v1.0.0.jar" \
          --data-binary @$JAR_FILE_PATH
                  
          echo "JAR file uploaded to the GitHub release"
